# Importando as bibliotecas necess√°rias
import streamlit as st
import unicodedata
import pandas as pd

# --- CONFIGURA√á√ÉO DA P√ÅGINA ---
st.set_page_config(
    page_title="DocentES | Censo Escolar",
    page_icon="üë©üèª‚Äçüè´",
    layout="wide"
)

# --- FUN√á√ÉO PARA CARREGAR TODOS OS DADOS ---
@st.cache_data
def carregar_dados():
    """
    Esta fun√ß√£o carrega todos os 5 arquivos CSV em DataFrames separados
    e os retorna em um dicion√°rio para f√°cil acesso.
    """
    # Nomes dos arquivos
    nomes_arquivos = {
        "dependencia": "docentes_dependencia.csv",
        "etapas": "docentes_etapas.csv",
        "formacao": "docentes_formacao.csv",
        "idade": "docentes_idade.csv",
        "vinculo": "docentes_vinculo.csv"
    }
    
    dataframes = {}
    for nome, caminho in nomes_arquivos.items():
        # Carrega cada dataframe usando ';' como separador
        df = pd.read_csv(caminho, delimiter=';')
        df.columns = df.columns.str.strip()
        dataframes[nome] = df
            
    return dataframes

# Carrega todos os dataframes
try:
    dfs = carregar_dados()
except FileNotFoundError as e:
    st.error(f"Erro ao carregar os dados: O arquivo {e.filename} n√£o foi encontrado.")
    st.info("Por favor, certifique-se de que todos os 5 arquivos CSV est√£o na mesma pasta que o app.py.")
    st.stop()

# --- DEFININDO BARRA LATERAL COM FILTROS (Ano e Munic√≠pio) ---

# Definindo fun√ß√£o auxiliar para normalizar texto para ordena√ß√£o
def normalizar_para_ordenacao(texto):
    """
    Remove acentos de uma string para us√°-la como chave de ordena√ß√£o.
    Ex: '√Åguia Branca' -> 'Aguia Branca'
    """
    # Normaliza a string para decompor os caracteres acentuados
    texto_normalizado = unicodedata.normalize('NFD', texto)
    # Remove os caracteres de combina√ß√£o (acentos)
    return "".join(c for c in texto_normalizado if unicodedata.category(c) != 'Mn')

# Ser√° usado o dataframe de 'etapas' como base para criar os filtros.

# Cabe√ßalho da sidebar
st.sidebar.header("‚öôÔ∏è Filtros")
st.sidebar.markdown("Use os filtros abaixo para selecionar o ano e o munic√≠pio desejados.")

# --- Filtro de Ano ---
ano_selecionado = st.sidebar.selectbox(
    "Selecione o Ano",
    options=sorted(
                    dfs['etapas']['Ano'].unique(), 
                    reverse=True
                  )
)

# --- Filtro de Munic√≠pio ---
# Criando a op√ß√£o geral
opcao_geral = ["Todos os Munic√≠pios"]
# Criando uma lista ordenada dos munic√≠pios
lista_municipios = sorted(
    dfs['etapas']['Munic√≠pio'].unique(),
    key=normalizar_para_ordenacao # Usando a fun√ß√£o de normaliza√ß√£o
    )
# Juntando as duas listas!
opcoes_municipios = opcao_geral + lista_municipios

# Usamos a nova lista completa como op√ß√µes do selectbox
municipio_selecionado = st.sidebar.selectbox(
    "Selecione o Munic√≠pio",
    options=opcoes_municipios
)

# Conte√∫do principal do app

# T√≠tulo da p√°gina
st.title("üë©üèæ‚Äçüè´ DocentES üë®üèª‚Äçüè´")
st.write("Bem-vindo ao DocentES, a plataforma sobre os Docentes do Esp√≠rito Santo!")

# Estrutura com duas colunas para alinhar a imagem
col1, col2 = st.columns([1,2])
with col2:
    st.image("https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhWSVR_PA-xWPXwdQ5qyRDWAZZdVA1JhdQuaT6yI926pYTAg0boScUh3J-lsiu1i3KDyHJQmN_OgNx6HX4Zun6XDIRfqNXJe8CdyKcnwDymZp8P52JvRrKav0otT263CjHKyS_RitA5VPJFOg6NJ-uqRwuksj2r_J1mna9CnfEVq4psg-QMaH4bq2Uy2w/w485-h335/fc-removebg-preview.png", width=400)


st.write("Aqui voc√™ pode explorar dados sobre os professores do estado, incluindo informa√ß√µes demogr√°ficas, forma√ß√£o acad√™mica, e muito mais.")

st.markdown("---")

# --- CRIA√á√ÉO DAS ABAS TEM√ÅTICAS (TABS) ---

# Nomeando as abas tem√°ticas
tab1, tab2, tab3, tab4, tab5 = st.tabs([
    "üìä Etapas de Ensino",
    "üìä Faixa Et√°ria e Sexo",
    "üìä Forma√ß√£o Acad√™mica",
    "üìä V√≠nculo Funcional",
    "üìä Depend√™ncia e Localiza√ß√£o"
])

# --- ABA 1: ETAPAS DE ENSINO ---

with tab1:
    st.markdown("#### Docentes por Etapa de Ensino")
    df_etapas = dfs["etapas"]

    # Definindo containers dentro da aba

    # --- REQUISITO 1: Tabela Descritiva ---
    c1 = st.container(border=True)
    c1.markdown("1. An√°lise Descritiva da Base de Dados (todo o Estado)")
    tabela_descritiva = df_etapas.drop(columns=['Ano','C√≥digo do Munic√≠pio']).describe()
    c1.write(tabela_descritiva)
 
    # Definindo espa√ßamento entre os containers
    st.write("")

    # --- REQUISITO 2: Gr√°fico de Barras ---
    c2 = st.container(border=True)
    c2.markdown("2. Gr√°fico de Docentes por Etapa de Ensino")
    # Informa√ß√£o de filtros aplicados no gr√°fico
    c2.info(f"Local: {municipio_selecionado} | Ano: {ano_selecionado}")
    c2.write("") # Espa√ßamento
    # Selecionando as colunas para o gr√°fico
    colunas_etapas = ['Creche', 'Pr√©-Escola', 'EF - Anos Iniciais', 'EF - Anos Finais', 'EM Proped√™utico', 'EM Integrado']
    # Estabelecendo a l√≥gica para o gr√°fico, conforme o filtro de munic√≠pio
    if municipio_selecionado == "Todos os Munic√≠pios":
        # SE o usu√°rio escolher ver o estado todo:
        # 1. Filtrar o DataFrame apenas pelo ano
        df_filtrado_ano = df_etapas[df_etapas['Ano'] == ano_selecionado]
        # 2. Somar os valores de todos os munic√≠pios
        dados_grafico = df_filtrado_ano[colunas_etapas].sum()

    else:
        # SEN√ÉO (o usu√°rio escolheu um munic√≠pio espec√≠fico)...
        # 1. Filtrar o DataFrame pelo ano E pelo munic√≠pio
        df_filtrado = df_etapas[
            (df_etapas['Ano'] == ano_selecionado) &
            (df_etapas['Munic√≠pio'] == municipio_selecionado)
        ]
        # 2. Pegar os dados do munic√≠pio e transpor (.T) para o gr√°fico
        dados_grafico = df_filtrado[colunas_etapas].T

    # Gerando o gr√°fico
    c2.bar_chart(dados_grafico)


# --- ABA 2: FAIXA ET√ÅRIA E SEXO ---
with tab2:
    st.markdown("#### Docentes por Faixa Et√°ria e Sexo")
    df_idade = dfs["idade"]

    # Definindo containers dentro da aba

    # --- REQUISITO 1: Tabela Descritiva ---
    c3 = st.container(border=True)
    c3.markdown("1. An√°lise Descritiva da Base de Dados (todo o Estado)")
    tabela_descritiva = df_idade.drop(columns=['Ano','C√≥digo do Munic√≠pio']).describe()
    c3.write(tabela_descritiva)
 
    # Definindo espa√ßamento entre os containers
    st.write("")

    # --- REQUISITO 2: Gr√°fico de Barras ---
    c4 = st.container(border=True)
    c4.markdown("2. Gr√°fico de Docentes por Faixa Et√°ria e Sexo")
    # Informa√ß√£o de filtros aplicados no gr√°fico
    c4.info(f"Local: {municipio_selecionado} | Ano: {ano_selecionado}")
    
    c4.write("") # Espa√ßamento

    # Selecionando as colunas para o gr√°fico
    colunas_idade = ['At√© 24 anos', 'De 25 a 29 anos', 'De 30 a 39 anos', 'De 40 a 49 anos', 'De 50 a 54 anos', 'De 55 a 59 anos', '60 anos ou mais']
    # Estabelecendo a l√≥gica para o gr√°fico, conforme o filtro de munic√≠pio
    if municipio_selecionado == "Todos os Munic√≠pios":
        df_filtrado_ano = df_idade[df_idade['Ano'] == ano_selecionado]
        dados_base = df_filtrado_ano.groupby("Sexo")[colunas_idade].sum().reset_index()
    else:
        dados_base = df_idade[
            (df_idade['Ano'] == ano_selecionado) &
            (df_idade['Munic√≠pio'] == municipio_selecionado)
        ]

    # Reorganizando os dados com melt
    dados_longo = dados_base.melt(
        id_vars="Sexo", 
        value_vars=colunas_idade, 
        var_name="Faixa Et√°ria", 
        value_name="Total de Docentes"
        )
    
    # Definindo a ordem correta das faixas et√°rias
    ordem_faixas = [
        'At√© 24 anos', 
        'De 25 a 29 anos', 
        'De 30 a 39 anos', 
        'De 40 a 49 anos',
        'De 50 a 54 anos',
        'De 55 a 59 anos',
        '60 anos ou mais'
        ]
    # Convertendo 'Faixa Et√°ria' em categoria com ordem definida
    dados_longo['Faixa Et√°ria'] = pd.Categorical(
        dados_longo['Faixa Et√°ria'], 
        categories=ordem_faixas,
        ordered=True
        )
    # Estrutura com duas colunas para alinhar a imagem
    col3, col4 = c4.columns([1,2])
    with col3:
        # Definindo filtro por sexo
        sexo_selecionado = st.selectbox(
                "Selecione o Sexo:",
                options=["Todos", "Feminino", "Masculino"]
            )
    c4.write("") # Espa√ßamento
    if sexo_selecionado != "Todos":
        dados_grafico = dados_longo[dados_longo['Sexo'] == sexo_selecionado]
    else:
        dados_grafico = dados_longo
    
    if not dados_grafico.empty:
        c4.bar_chart(
            dados_grafico,
            x="Faixa Et√°ria", 
            y="Total de Docentes", 
            color='Sexo'
            )
    else:
        c4.warning("Nenhum dado dispon√≠vel para os filtros selecionados.")

# --- ABA 3: N√çVEL DE FORMA√á√ÉO ---
with tab3:
    st.markdown("#### Docentes por Escolaridade ou N√≠vel de Forma√ß√£o Acad√™mica")
    df_formacao = dfs["formacao"]

    # Definindo containers dentro da aba

    # --- REQUISITO 1: Tabela Descritiva ---
    c5 = st.container(border=True)
    c5.markdown("1. An√°lise Descritiva da Base de Dados (todo o Estado)")
    tabela_descritiva = df_formacao.drop(columns=['Ano','C√≥digo do Munic√≠pio']).describe()
    c5.write(tabela_descritiva)
 
    # Definindo espa√ßamento entre os containers
    st.write("")

    # --- REQUISITO 2: Gr√°fico de Barras ---
    c6 = st.container(border=True)
    c6.markdown("2. Gr√°fico de Docentes por Forma√ß√£o Acad√™mica")
    # Informa√ß√£o de filtros aplicados no gr√°fico
    c6.info(f"Local: {municipio_selecionado} | Ano: {ano_selecionado}")
    
    c6.write("") # Espa√ßamento

    # Selecionando as colunas para o gr√°fico
    colunas_formacao = [
        'Ensino Fundamental', 'Ensino M√©dio', 'Gradua√ß√£o - Licenciatura',
        'Gradua√ß√£o - Sem Licenciatura', 'Especializa√ß√£o', 'Mestrado', 'Doutorado'
    ]
    
    # Definindo a ordem l√≥gica para as barras do gr√°fico
    ordem_grafico = [
        'Ensino Fundamental', 
        'Ensino M√©dio', 
        'Gradua√ß√£o - Licenciatura',
        'Gradua√ß√£o - Sem Licenciatura', 
        'Especializa√ß√£o', 
        'Mestrado', 
        'Doutorado'
    ]

    if municipio_selecionado == "Todos os Munic√≠pios":
        # SE o usu√°rio escolheu ver o estado todo...
        df_filtrado_ano = df_formacao[df_formacao['Ano'] == ano_selecionado]
        # Somamos os valores de todos os munic√≠pios
        dados_soma = df_filtrado_ano[colunas_formacao].sum()
        # Reordenamos os dados de acordo com nossa lista
        dados_grafico = dados_soma.reindex(ordem_grafico)

    else:
        # SEN√ÉO (o usu√°rio escolheu um munic√≠pio espec√≠fico)...
        df_filtrado = df_formacao[
            (df_formacao['Ano'] == ano_selecionado) &
            (df_formacao['Munic√≠pio'] == municipio_selecionado)
        ]
        # Transpondo os dados
        dados_transpostos = df_filtrado[colunas_formacao].T
        # Reordenando o √≠ndice (forma√ß√µes) de acordo com a lista
        dados_grafico = dados_transpostos.reindex(ordem_grafico)

    # Exibindo o gr√°fico
    c6.bar_chart(dados_grafico)

# --- ABA 4: V√çNCULO FUNCIONAL ---
with tab4:
    st.markdown("#### Docentes por V√≠nculo Funcional e Depend√™ncia Administrativa")
    df_vinculo = dfs["vinculo"]

    # Definindo containers dentro da aba

    # --- REQUISITO 1: Tabela Descritiva ---
    c7 = st.container(border=True)
    c7.markdown("1. An√°lise Descritiva da Base de Dados (todo o Estado)")
    tabela_descritiva = df_vinculo.describe()
    c7.write(tabela_descritiva)
 
    # Definindo espa√ßamento entre os containers
    st.write("")

    # --- REQUISITO 2: Gr√°fico de Barras ---
    c8 = st.container(border=True)
    c8.markdown("2. Gr√°fico de Docentes por V√≠nculo Funcional e Depend√™ncia Administrativa")
    # Informa√ß√£o de filtros aplicados no gr√°fico
    c8.info(f"Local: {municipio_selecionado} | Ano: {ano_selecionado}")
    
    c8.write("") # Espa√ßamento
    
    # Preparando os dados base (Estado ou Munic√≠pio)
    if municipio_selecionado == "Todos os Munic√≠pios":
        df_filtrado_ano = df_vinculo[df_vinculo['Ano'] == ano_selecionado]
        # Agrupando por V√≠nculo para ter a soma correta por categoria
        dados_base = df_filtrado_ano.groupby('V√≠nculo Funcional').sum(numeric_only=True).reset_index()
    else:
        # Para munic√≠pio espec√≠fico, apenas filtramos
        dados_base = df_vinculo[
            (df_vinculo['Ano'] == ano_selecionado) &
            (df_vinculo['Munic√≠pio'] == municipio_selecionado)
        ]

    # Criando o filtro por V√≠nculo Funcional
    lista_vinculos = dados_base['V√≠nculo Funcional'].unique().tolist()
    
    col_5, col_6 = c8.columns([1, 2]) # Para o filtro n√£o ocupar a tela toda
    with col_5:
        vinculo_selecionado = st.selectbox(
            "Selecione o V√≠nculo Funcional:",
            options=lista_vinculos
        )
    
    # Filtrando os dados pelo v√≠nculo selecionado
    dados_filtrados_vinculo = dados_base[dados_base['V√≠nculo Funcional'] == vinculo_selecionado]

    # Preparando os dados finais para o bar_chart
    colunas_grafico = ['Federal', 'Estadual', 'Municipal']
    
    # Pegando apenas as colunas num√©ricas e transpomos (.T)
    # para que as depend√™ncias virem as barras do gr√°fico
    dados_para_plotar = dados_filtrados_vinculo[colunas_grafico].T

    # Exibindo o gr√°fico
    if not dados_para_plotar.empty:
        c8.bar_chart(dados_para_plotar)
    else:
        c8.warning("Nenhum dado encontrado para a sele√ß√£o atual.")

# --- ABA 5: DEPEND√äNCIA E LOCALIZA√á√ÉO ---
with tab5:
    st.markdown("#### Docentes por Depend√™ncia Administrativa e Localiza√ß√£o")
    df_dependencia = dfs["dependencia"]

    # Definindo containers dentro da aba

    # --- REQUISITO 1: Tabela Descritiva ---
    c9 = st.container(border=True)
    c9.markdown("1. An√°lise Descritiva da Base de Dados (todo o Estado)")
    tabela_descritiva = df_dependencia.describe()
    c9.write(tabela_descritiva)
 
    # Definindo espa√ßamento entre os containers
    st.write("")


    # --- REQUISITO 2: Gr√°fico de Barras
    c10 = st.container(border=True)
    c10.markdown("2. Gr√°fico de Docentes por Localiza√ß√£o e Depend√™ncia Administrativa")
    # Informa√ß√£o de filtros aplicados no gr√°fico
    c10.info(f"Local: {municipio_selecionado} | Ano: {ano_selecionado}")
    
    c10.write("") # Espa√ßamento
    
    # Preparando os dados base (Estado ou Munic√≠pio) ---
    if municipio_selecionado == "Todos os Munic√≠pios":
        dados_base = df_dependencia[df_dependencia['Ano'] == ano_selecionado]
    else:
        dados_base = df_dependencia[
            (df_dependencia['Ano'] == ano_selecionado) &
            (df_dependencia['Munic√≠pio'] == municipio_selecionado)
        ]

    # Criando o filtro por Localiza√ß√£o (Urbana, Rural)
    col_7, col_8 = c10.columns([1, 2])
    with col_7:
        localizacao_selecionada = st.selectbox(
            "Selecione a Localiza√ß√£o:",
            options=["Todas", "Urbana", "Rural"],
            key="filtro_localizacao" # Chave fixa para evitar resetar a sele√ß√£o ao interagir com outros filtros
        )

    # Preparando os dados finais para o bar_chart
    colunas_grafico = ['Federal', 'Estadual', 'Municipal', 'Privada']
    
    # Verificamos PRIMEIRO se a vis√£o √© estadual ou municipal
    if municipio_selecionado == "Todos os Munic√≠pios":
        # Se for estadual, a opera√ß√£o final √© sempre uma SOMA.
        if localizacao_selecionada != "Todas":
            # Filtramos pela localiza√ß√£o escolhida (Urbana ou Rural)
            dados_filtrados_loc = dados_base[dados_base['Localiza√ß√£o'] == localizacao_selecionada]
        else:
            # Se for "Todas", usamos o dataframe base (com ambas as localiza√ß√µes)
            dados_filtrados_loc = dados_base
        
        # A opera√ß√£o final √© somar tudo para ter o total do estado
        dados_para_plotar = dados_filtrados_loc[colunas_grafico].sum()

    else:
        # Se for municipal, a opera√ß√£o final √© sempre uma TRANSPOSI√á√ÉO.
        if localizacao_selecionada != "Todas":
            # Filtramos pela localiza√ß√£o (teremos 1 linha)
            dados_filtrados_loc = dados_base[dados_base['Localiza√ß√£o'] == localizacao_selecionada]
            
            # Transpomos e renomeamos a coluna
            dados_transpostos = dados_filtrados_loc[colunas_grafico].T
            dados_transpostos.columns = ['N¬∫ de Docentes']
            dados_para_plotar = dados_transpostos
        else:
            # Se for "Todas", primeiro somamos as linhas de Urbana e Rural daquele munic√≠pio
            # e depois transpomos.
            soma_municipio = dados_base[colunas_grafico].sum().to_frame(name='N¬∫ de Docentes')
            dados_para_plotar = soma_municipio
        
    # Exibindo o gr√°fico
    if dados_para_plotar.empty:
        c10.warning("Nenhum dado encontrado para a sele√ß√£o atual.")
    else:
        c10.bar_chart(dados_para_plotar)

# Rodap√©
st.markdown("---")
st.write("¬© 2025 DocentES. Com Dados do Censo Escolar, de 2022 a 2024. Todos os direitos reservados.")